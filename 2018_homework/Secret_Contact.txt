#include<stdio.h>
#include<iostream>
#include<vector>
using namespace std;
#define FOR(i,n) for(int i=1;i<=n;i++)
int arr[501][501];

struct n {
	int k[500];
	int key;
	int kcnt=1;
};
n node[501];

int main()
{
	freopen("1.inp", "r", stdin);
	freopen("11.out", "w", stdout);
	int n,m,k,n1,n2,w,t;
	cin >> t;
	vector <int> v;
	FOR(testcase, t)
	{
		cin >> n >> m >> k;
		FOR(i, m)
		{
			cin >> n1 >> n2 >> w;
			arr[n1][n2] = arr[n2][n1] = w;
		}
		FOR(i, k)//query
		{
			FOR(j, n)
			{
				node[j].kcnt = 1;
				node[j].k[1] = 0;
				node[j].key = 0;
			}
			cin >> n1 >> n2;
			FOR(j, n) if (arr[n1][j])
			{
				node[j].key = arr[n1][j];
				node[j].k[node[j].kcnt++] = n1;
				node[j].k[node[j].kcnt++] = j;
				v.push_back(j);
			}
			for (;;)
			{
				int b = v.back();
				v.pop_back();
				FOR(j, n)
				{
					if (arr[b][j])
					{
						if (node[j].key == node[b].key + arr[b][j])
						{
							int result = node[j].key/2+node[j].key%2;
							int org1, org2, new1, new2;
							for (int i = 1; i < node[j].kcnt - 1; i++)
							{
								result -= arr[node[j].k[i]][node[j].k[i + 1]];
								if (result <= 0)
								{
									if (result)
									{
										org1 = node[j].k[i]>node[j].k[i + 1]? node[j].k[i + 1]: node[j].k[i];
										org2 = node[j].k[i]<node[j].k[i + 1] ? node[j].k[i + 1] : node[j].k[i];
									}
									else org1 = org2 = node[j].k[i + 1];
								}
							}
							result = node[j].key / 2 + node[j].key % 2;
							for (int i = 1; i < node[b].kcnt-1; i++)
							{
								result -= arr[node[b].k[i]][node[b].k[i + 1]];
								if (result <= 0)
								{
									if (result)
									{
										new1 = node[b].k[i]>node[b].k[i + 1] ? node[b].k[i + 1] : node[b].k[i];
										new2 = node[b].k[i]<node[b].k[i + 1] ? node[b].k[i + 1] : node[b].k[i];
									}
									else new1 = new2 = node[b].k[i + 1];
								}
								else if (i == node[b].kcnt - 2)
								{
									new1 = node[b].k[i+1]>j?j:node[b].k[i+1];
									new2 = j>node[b].k[i+1]?j:node[b].k[i+1];
								}
							}
							if (org1 > new1||(org1==new1&&org2>new2))
							{
								for (int z = 0; z < node[b].kcnt; z++)node[j].k[z] = node[b].k[z];
								node[j].kcnt = node[b].kcnt;
								node[j].k[node[j].kcnt++] = j;
								v.push_back(j);
							}
						}
						if ((node[j].key&&node[j].key > node[b].key + arr[b][j])||!node[j].key)
						{
							node[j].key = node[b].key + arr[b][j];
							
							for (int z = 0; z < node[b].kcnt; z++)node[j].k[z] = node[b].k[z];
							node[j].kcnt = node[b].kcnt;
							node[j].k[node[j].kcnt++] = j;
							v.push_back(j);
						}
					}
				}
				if (v.size() == 0)break;
			}
			int mx, mn;
			int result = node[n2].key / 2+node[n2].key%2;
			for (int i = 1; i < node[n2].kcnt-1; i++)
			{

				result -= arr[node[n2].k[i]][node[n2].k[i + 1]];
				if (result < 0)
				{
					if (node[n2].k[i] > node[n2].k[i + 1])
					{
						mx = node[n2].k[i];
						mn = node[n2].k[i + 1];
					}
					else
					{
						mx = node[n2].k[i + 1];
						mn = node[n2].k[i];
					}
					cout << mn << " " << mx << "\n";
					break;
				}
				else if (result == 0)
				{
					cout << node[n2].k[i+1] << " " << node[n2].k[i+1] << "\n";
					break;
				}
			}
		}
		FOR(i, n) FOR(j, n)arr[i][j] = arr[j][i] = 0;
	}//test
}//main